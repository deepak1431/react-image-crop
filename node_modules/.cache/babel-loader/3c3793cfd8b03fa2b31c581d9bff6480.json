{"ast":null,"code":"import _regeneratorRuntime from \"/home/mqfullstack-2/react-image-crop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/mqfullstack-2/react-image-crop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/mqfullstack-2/react-image-crop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/mqfullstack-2/react-image-crop/src/components/ImageCropper/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport demoImage from \"./demo-image.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageCropper(props) {\n  _s();\n\n  var imageToCrop = props.imageToCrop,\n      onImageCropped = props.onImageCropped;\n\n  var _useState = useState( // default crop config\n  {\n    unit: \"%\",\n    width: 30,\n    aspect: 16 / 9\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cropConfig = _useState2[0],\n      setCropConfig = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imageRef = _useState4[0],\n      setImageRef = _useState4[1];\n\n  function cropImage(_x) {\n    return _cropImage.apply(this, arguments);\n  }\n\n  function _cropImage() {\n    _cropImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(crop) {\n      var croppedImage;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(imageRef && crop.width && crop.height)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return getCroppedImage(imageRef, crop, \"croppedImage.jpeg\" // destination filename\n              );\n\n            case 3:\n              croppedImage = _context.sent;\n              // calling the props function to expose\n              // croppedImage to the parent component\n              onImageCropped(croppedImage);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _cropImage.apply(this, arguments);\n  }\n\n  function getCroppedImage(sourceImage, cropConfig, fileName) {\n    // creating the cropped image from the source image\n    var canvas = document.createElement(\"canvas\");\n    var scaleX = sourceImage.naturalWidth / sourceImage.width;\n    var scaleY = sourceImage.naturalHeight / sourceImage.height;\n    canvas.width = cropConfig.width;\n    canvas.height = cropConfig.height;\n    var ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(sourceImage, cropConfig.x * scaleX, cropConfig.y * scaleY, cropConfig.width * scaleX, cropConfig.height * scaleY, 0, 0, cropConfig.width, cropConfig.height);\n    return new Promise(function (resolve, reject) {\n      canvas.toBlob(function (blob) {\n        // returning an error\n        if (!blob) {\n          reject(new Error(\"Canvas is empty\"));\n          return;\n        }\n\n        blob.name = fileName; // creating a Object URL representing the Blob object given\n\n        var croppedImageUrl = window.URL.createObjectURL(blob);\n        resolve(croppedImageUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(ReactCrop, {\n    src: imageToCrop || demoImage,\n    crop: cropConfig,\n    ruleOfThirds: true,\n    onImageLoaded: function onImageLoaded(imageRef) {\n      return setImageRef(imageRef);\n    },\n    onComplete: function onComplete(cropConfig) {\n      return cropImage(cropConfig);\n    },\n    onChange: function onChange(cropConfig) {\n      return setCropConfig(cropConfig);\n    },\n    crossorigin: \"anonymous\" // to avoid CORS-related problems\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImageCropper, \"udzb1YvAGvU+9JK5MAsofanxIAg=\");\n\n_c = ImageCropper;\nImageCropper.defaultProps = {\n  onImageCropped: function onImageCropped() {}\n};\nexport default ImageCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"names":["React","useState","ReactCrop","demoImage","ImageCropper","props","imageToCrop","onImageCropped","unit","width","aspect","cropConfig","setCropConfig","imageRef","setImageRef","cropImage","crop","height","getCroppedImage","croppedImage","sourceImage","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","Error","name","croppedImageUrl","window","URL","createObjectURL","defaultProps"],"sources":["/home/mqfullstack-2/react-image-crop/src/components/ImageCropper/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport demoImage from \"./demo-image.jpg\";\r\n\r\nfunction ImageCropper(props) {\r\n  const { imageToCrop, onImageCropped } = props;\r\n\r\n  const [cropConfig, setCropConfig] = useState(\r\n    // default crop config\r\n    {\r\n      unit: \"%\",\r\n      width: 30,\r\n      aspect: 16 / 9\r\n    }\r\n  );\r\n\r\n  const [imageRef, setImageRef] = useState();\r\n\r\n  async function cropImage(crop) {\r\n    if (imageRef && crop.width && crop.height) {\r\n      const croppedImage = await getCroppedImage(\r\n        imageRef,\r\n        crop,\r\n        \"croppedImage.jpeg\" // destination filename\r\n      );\r\n\r\n      // calling the props function to expose\r\n      // croppedImage to the parent component\r\n      onImageCropped(croppedImage);\r\n    }\r\n  }\r\n\r\n  function getCroppedImage(sourceImage, cropConfig, fileName) {\r\n    // creating the cropped image from the source image\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = sourceImage.naturalWidth / sourceImage.width;\r\n    const scaleY = sourceImage.naturalHeight / sourceImage.height;\r\n    canvas.width = cropConfig.width;\r\n    canvas.height = cropConfig.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      sourceImage,\r\n      cropConfig.x * scaleX,\r\n      cropConfig.y * scaleY,\r\n      cropConfig.width * scaleX,\r\n      cropConfig.height * scaleY,\r\n      0,\r\n      0,\r\n      cropConfig.width,\r\n      cropConfig.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob((blob) => {\r\n        // returning an error\r\n        if (!blob) {\r\n          reject(new Error(\"Canvas is empty\"));\r\n          return;\r\n        }\r\n\r\n        blob.name = fileName;\r\n        // creating a Object URL representing the Blob object given\r\n        const croppedImageUrl = window.URL.createObjectURL(blob);\r\n\r\n        resolve(croppedImageUrl);\r\n      }, \"image/jpeg\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ReactCrop\r\n      src={imageToCrop || demoImage}\r\n      crop={cropConfig}\r\n      ruleOfThirds\r\n      onImageLoaded={(imageRef) => setImageRef(imageRef)}\r\n      onComplete={(cropConfig) => cropImage(cropConfig)}\r\n      onChange={(cropConfig) => setCropConfig(cropConfig)}\r\n      crossorigin=\"anonymous\" // to avoid CORS-related problems\r\n    />\r\n  );\r\n}\r\n\r\nImageCropper.defaultProps = {\r\n  onImageCropped: () => {}\r\n};\r\n\r\nexport default ImageCropper;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}